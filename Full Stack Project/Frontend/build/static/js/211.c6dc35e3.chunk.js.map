{"version":3,"file":"static/js/211.c6dc35e3.chunk.js","mappings":"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","sources":["Component/Login/index.js","Layout/Login/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport Auth from '../../Auth';\r\nimport Axios from 'axios';\r\nimport Validator, { trim } from 'validator';\r\nimport Swal from 'sweetalert2';\r\nimport { Row, Col, Button, Form, InputGroup } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\nimport LoginImage from '../../Assets/Images/login.png';\r\nimport { MdEmail } from 'react-icons/md';\r\nimport { IoIosLock } from 'react-icons/io';\r\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\n\r\nfunction Login() {\r\n    const [visible, setVisible] = useState(false);\r\n    const [isChecked, setIsChecked] = useState(localStorage.getItem(\"Remember Me\") === 'false' ? false : true);\r\n    const [margin, setMargin] = useState(getMargin());\r\n    const [limit, setLimit] = useState(localStorage.getItem('limit') > 0 ? localStorage.getItem('limit') : 0);\r\n    const [login, setLogin] = useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    const navigate = useNavigate();\r\n    const localEmail = localStorage.getItem(\"email\");\r\n    const token = localStorage.getItem(\"refreshToken\");\r\n\r\n    function getMargin() {\r\n        if (window.innerWidth > 1200) {\r\n            return '-160px';\r\n        } else if (window.innerWidth > 992) {\r\n            return '-110px';\r\n        } else if (window.innerWidth > 767) {\r\n            return '-70px';\r\n        } else if (window.innerWidth > 576) {\r\n            return '0px';\r\n        } else {\r\n            return '0px';\r\n        }\r\n    };\r\n\r\n    const handleCheckChange = (event) => {\r\n        setIsChecked(event.target.checked);\r\n        localStorage.setItem('Remember Me', event.target.checked);\r\n\r\n        if (localEmail !== null && token !== null && isChecked !== true) {\r\n            setLogin({\r\n                email: localEmail,\r\n                password: ''\r\n            });\r\n            const password = document.getElementById('myPassword');\r\n            password.setAttribute(\"disabled\", \"true\");\r\n            password.setAttribute(\"placeholder\", \"Please login without password\");\r\n        } else {\r\n            const password = document.getElementById('myPassword');\r\n            password.removeAttribute(\"disabled\");\r\n            password.setAttribute(\"placeholder\", \"Password\");\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setLogin({\r\n            ...login,\r\n            [name]: value,\r\n        })\r\n    };\r\n\r\n    const handleAutoLogin = async (event) => {\r\n        if (Validator.isEmpty(login.email)) {\r\n            event.preventDefault();\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timerProgressBar: true,\r\n                timer: 3000,\r\n                didOpen: (toast) => {\r\n                    const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                    if (timerProgressBar) {\r\n                        timerProgressBar.style.backgroundColor = '#ff6347';\r\n                    }\r\n                    toast.onmouseenter = Swal.stopTimer;\r\n                    toast.onmouseleave = Swal.resumeTimer;\r\n                }\r\n            });\r\n            Toast.fire({\r\n                icon: 'error',\r\n                title: 'Email is Required',\r\n            })\r\n        } else if (!Validator.isEmail(login.email)) {\r\n            event.preventDefault();\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timerProgressBar: true,\r\n                timer: 3000,\r\n                didOpen: (toast) => {\r\n                    const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                    if (timerProgressBar) {\r\n                        timerProgressBar.style.backgroundColor = '#ff6347';\r\n                    };\r\n                    toast.onmouseenter = Swal.stopTimer;\r\n                    toast.onmouseleave = Swal.resumeTimer;\r\n                }\r\n            });\r\n            Toast.fire({\r\n                icon: 'error',\r\n                title: 'Enter a valid Email',\r\n            })\r\n        } else {\r\n            event.preventDefault();\r\n            const userLogin = {\r\n                ...login,\r\n                ...(token) && { token },\r\n            }\r\n            const trimObject = Object.fromEntries(\r\n                Object.entries(userLogin).map(([key, value]) => ([key, key === 'email' ? value.toLowerCase() : value && typeof value === 'string' ? value.trim() : value]))\r\n            );\r\n            console.log(trimObject);\r\n            try {\r\n                const loginResponce = await Axios.post('http://127.0.0.1:5000/vitamins/autoLogin', trimObject);\r\n                console.log(loginResponce);\r\n                if (loginResponce.data.status === 200 && isChecked === true) {\r\n                    localStorage.setItem(\"userToken\", loginResponce.data.userToken);\r\n                    localStorage.setItem(\"email\", trimObject.email);\r\n                    localStorage.removeItem(\"password\");\r\n                    const loginButton = document.getElementById('loginButton')\r\n                    loginButton.textContent = 'Loading....';\r\n                    loginButton.setAttribute('disabled', 'true');\r\n                    Auth.login(() => {\r\n                        navigate('/home');\r\n                    });\r\n                } else if (loginResponce.data?.arMissField) {\r\n                    setLimit(Number(limit) + 1);\r\n                    const Toast = Swal.mixin({\r\n                        toast: true,\r\n                        position: 'top-end',\r\n                        showCancelButton: false,\r\n                        showConfirmButton: false,\r\n                        timer: 4000,\r\n                        timerProgressBar: true,\r\n                        didOpen: (toast) => {\r\n                            const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                            if (timerProgressBar) {\r\n                                timerProgressBar.style.backgroundColor = 'limegreen';\r\n                            }\r\n                            toast.onmouseenter = Swal.stopTimer;\r\n                            toast.onmouseleave = Swal.resumeTimer;\r\n                        }\r\n                    });\r\n                    Toast.fire({\r\n                        icon: 'error',\r\n                        title: `${loginResponce.data.arMissField[0]} is Required`,\r\n                    });\r\n                } else if (loginResponce.data?.msg === 'Invalid session. Please re-authenticate with the correct email') {\r\n                    setLimit(Number(limit) + 1);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Update Remember Me Email',\r\n                        text: 'The email you entered is different from the saved email. Do you want to update your Remember Me email?',\r\n                        reverseButtons: true,\r\n                        showConfirmButton: true,\r\n                        showCancelButton: true,\r\n                        confirmButtonText: 'Yes',\r\n                        cancelButtonText: 'No',\r\n                        confirmButtonColor: 'limegreen',\r\n                        cancelButtonColor: '#ff6374',\r\n                    }).then(result => {\r\n                        if (result.isConfirmed) {\r\n                            localStorage.removeItem('email');\r\n                            localStorage.removeItem('refreshToken');\r\n                            localStorage.removeItem(\"userToken\");\r\n                            window.location.reload();\r\n                            navigate('/');\r\n                        }\r\n                    });\r\n                } else {\r\n                    setLimit(Number(limit) + 1);\r\n                    const Toast = Swal.mixin({\r\n                        toast: true,\r\n                        position: 'top-end',\r\n                        showCancelButton: false,\r\n                        showConfirmButton: false,\r\n                        timer: 4000,\r\n                        timerProgressBar: true,\r\n                        didOpen: (toast) => {\r\n                            const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                            if (timerProgressBar) {\r\n                                timerProgressBar.style.backgroundColor = '#ff6347';\r\n                            }\r\n                            toast.onmouseenter = Swal.stopTimer;\r\n                            toast.onmouseleave = Swal.resumeTimer;\r\n                        }\r\n                    });\r\n                    Toast.fire({\r\n                        icon: 'error',\r\n                        title: `${loginResponce.data.msg}`,\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                if (error.message) {\r\n                    setLimit(Number(limit) + 1);\r\n                    const Toast = Swal.mixin({\r\n                        toast: true,\r\n                        position: 'top-end',\r\n                        showCancelButton: false,\r\n                        showConfirmButton: false,\r\n                        timer: 4000,\r\n                        timerProgressBar: true,\r\n                        didOpen: (toast) => {\r\n                            const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                            if (timerProgressBar) {\r\n                                timerProgressBar.style.backgroundColor = '#ff6347';\r\n                            }\r\n                            toast.onmouseenter = Swal.stopTimer;\r\n                            toast.onmouseleave = Swal.resumeTimer;\r\n                        }\r\n                    });\r\n                    Toast.fire({\r\n                        icon: 'error',\r\n                        title: `Refresh this page Try again.`,\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        if (Validator.isEmpty(login.email)) {\r\n            event.preventDefault();\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timerProgressBar: true,\r\n                timer: 3000,\r\n                didOpen: (toast) => {\r\n                    const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                    if (timerProgressBar) {\r\n                        timerProgressBar.style.backgroundColor = '#ff6347';\r\n                    }\r\n                    toast.onmouseenter = Swal.stopTimer;\r\n                    toast.onmouseleave = Swal.resumeTimer;\r\n                }\r\n            });\r\n            Toast.fire({\r\n                icon: 'error',\r\n                title: 'Email is Required',\r\n            })\r\n        } else if (!Validator.isEmail(login.email)) {\r\n            event.preventDefault();\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timerProgressBar: true,\r\n                timer: 3000,\r\n                didOpen: (toast) => {\r\n                    const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                    if (timerProgressBar) {\r\n                        timerProgressBar.style.backgroundColor = '#ff6347';\r\n                    };\r\n                    toast.onmouseenter = Swal.stopTimer;\r\n                    toast.onmouseleave = Swal.resumeTimer;\r\n                }\r\n            });\r\n            Toast.fire({\r\n                icon: 'error',\r\n                title: 'Enter a valid Email',\r\n            })\r\n        } else if (limit >= 5) {\r\n            event.preventDefault();\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timerProgressBar: true,\r\n                timer: 3000,\r\n                didOpen: (toast) => {\r\n                    const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                    if (timerProgressBar) {\r\n                        timerProgressBar.style.backgroundColor = '#ff6347';\r\n                    };\r\n                    toast.onmouseenter = Swal.stopTimer;\r\n                    toast.onmouseleave = Swal.resumeTimer;\r\n                }\r\n            });\r\n            Toast.fire({\r\n                icon: 'error',\r\n                title: 'Too many failed attempts Try again after 10 minutes',\r\n            })\r\n        } else if (Validator.isEmpty(login.password)) {\r\n            event.preventDefault();\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timer: 3000,\r\n                timerProgressBar: true,\r\n                didOpen: (toast) => {\r\n                    const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                    if (timerProgressBar) {\r\n                        timerProgressBar.style.backgroundColor = '#ff6347';\r\n                    }\r\n                    toast.onmouseenter = Swal.stopTimer;\r\n                    toast.onmouseleave = Swal.resumeTimer;\r\n                }\r\n            });\r\n            Toast.fire({\r\n                icon: 'error',\r\n                title: 'Password is Required',\r\n            });\r\n        } else if (!Validator.isStrongPassword(login.password)) {\r\n            event.preventDefault();\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timer: 8000,\r\n                timerProgressBar: true,\r\n                didOpen: (toast) => {\r\n                    const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n                    if (timerProgressBar) {\r\n                        timerProgressBar.style.backgroundColor = '#ff6347';\r\n                    }\r\n                    toast.onmouseenter = Swal.stopTimer;\r\n                    toast.onmouseleave = Swal.resumeTimer;\r\n                }\r\n            });\r\n            Toast.fire({\r\n                icon: 'error',\r\n                title: 'The Password must contain 8 characters, including an uppercase letter, lowercase letter, number and special characters.',\r\n            });\r\n        } else {\r\n            event.preventDefault();\r\n            const trimObject = Object.fromEntries(\r\n                Object.entries(login).map(([key, value]) => ([key, key === 'email' ? value.toLowerCase() : value && typeof value === 'string' ? value.trim() : value]))\r\n            );\r\n            console.log(trimObject);\r\n            //     try{\r\n            //         const loginResponce = await Axios.post('http://127.0.0.1:5000/vitamins/login',trimObject);\r\n            //         if(loginResponce.data.status === 200 && isChecked === false){\r\n            //                 localStorage.setItem(\"userToken\", loginResponce.data.userToken);\r\n            //                 localStorage.setItem(\"email\",login.email);\r\n            //                 //localStorage.clear();\r\n            //                 const loginButton = document.getElementById(\"loginButton\");\r\n            //                 loginButton.textContent = 'Loading....';\r\n            //                 loginButton.setAttribute(\"disabled\",\"true\");\r\n\r\n            //             } else if (loginResponce.data.status === 200 && isChecked === true){\r\n            //                 localStorage.setItem(\"userToken\", loginResponce.data.userToken);\r\n            //                 //localStorage.setItem(\"refreshToken\",loginResponce.data.refreshToken);\r\n            //                 localStorage.setItem(\"email\", trimObject.email);\r\n            //                 const loginButton = document.getElementById('loginButton')\r\n            //                 loginButton.textContent =  'Loading....';\r\n            //                 loginButton.setAttribute('disabled','true');\r\n            //                 Auth.login(() => {\r\n            //                     navigate('/home');\r\n            //                 });\r\n            //             } else if(loginResponce.data?.arMissField){\r\n            //                 setLimit(Number(limit) + 1);\r\n            //                 const Toast = Swal.mixin({\r\n            //                     toast: true,\r\n            //                     position:'top-end',\r\n            //                     showCancelButton:false,\r\n            //                     showConfirmButton:false,\r\n            //                     timer:4000,\r\n            //                     timerProgressBar: true,\r\n            //                     didOpen: (toast) => {\r\n            //                         const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n            //                         if(timerProgressBar){\r\n            //                             timerProgressBar.style.backgroundColor = 'limegreen';\r\n            //                         }\r\n            //                         toast.onmouseenter = Swal.stopTimer;\r\n            //                         toast.onmouseleave = Swal.resumeTimer;\r\n            //                     }\r\n            //                 });\r\n            //                 Toast.fire({\r\n            //                     icon:'error',\r\n            //                     title:`${loginResponce.data.arMissField[0]} is Required`,\r\n            //                 });\r\n            //             } else {\r\n            //                 setLimit(Number(limit) + 1);\r\n            //                 const Toast = Swal.mixin({\r\n            //                     toast: true,\r\n            //                     position:'top-end',\r\n            //                     showCancelButton:false,\r\n            //                     showConfirmButton:false,\r\n            //                     timer:4000,\r\n            //                     timerProgressBar: true,\r\n            //                     didOpen: (toast) => {\r\n            //                         const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n            //                         if(timerProgressBar){\r\n            //                             timerProgressBar.style.backgroundColor = '#ff6347';\r\n            //                         }\r\n            //                         toast.onmouseenter = Swal.stopTimer;\r\n            //                         toast.onmouseleave = Swal.resumeTimer;\r\n            //                     }\r\n            //                 });\r\n            //                 Toast.fire({\r\n            //                     icon:'error',\r\n            //                     title:`${loginResponce.data.msg}`,\r\n            //                 });\r\n            //             }\r\n            //     } catch(error) {\r\n            //         if(error.message){\r\n            //             setLimit(Number(limit) + 1);\r\n            //             const Toast = Swal.mixin({\r\n            //                 toast: true,\r\n            //                 position:'top-end',\r\n            //                 showCancelButton:false,\r\n            //                 showConfirmButton:false,\r\n            //                 timer:4000,\r\n            //                 timerProgressBar: true,\r\n            //                 didOpen: (toast) => {\r\n            //                     const timerProgressBar = document.querySelector('.swal2-timer-progress-bar');\r\n            //                     if(timerProgressBar){\r\n            //                         timerProgressBar.style.backgroundColor = '#ff6347';\r\n            //                     }\r\n            //                     toast.onmouseenter = Swal.stopTimer;\r\n            //                     toast.onmouseleave = Swal.resumeTimer;\r\n            //                 }\r\n            //             });\r\n            //             Toast.fire({\r\n            //                 icon:'error',\r\n            //                 title:`Refresh this page Try again.`,\r\n            //             });\r\n            //     } \r\n            // }\r\n            Auth.login(() => {\r\n                navigate('/home');\r\n            });\r\n        };\r\n    };\r\n\r\n    const handleForgot = () => {\r\n        localStorage.setItem(\"showComponent\", 0);\r\n        navigate('/forgot');\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setMargin(getMargin());\r\n        };\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        Auth.logout(() => {\r\n            localStorage.setItem('limit', limit);\r\n        });\r\n        if (limit >= 5) {\r\n            setTimeout(() => { setLimit(0) }, 1000);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (localEmail !== null && token !== null && isChecked === true) {\r\n            setLogin({\r\n                email: localEmail,\r\n            })\r\n            const password = document.getElementById('myPassword');\r\n            password.setAttribute(\"disabled\", \"true\");\r\n            password.setAttribute(\"placeholder\", \"Please login without password\");\r\n        } else {\r\n            const password = document.getElementById('myPassword');\r\n            password.removeAttribute(\"disabled\");\r\n            password.setAttribute(\"placeholder\", \"Password\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Login</title>\r\n                <meta name=\"description\" content=\"Only the best when you choose products offered on our platform - high quality\r\ningredients for high quality products!\"/>\r\n                <meta name=\"keywords\" content=\"medical,medicine,tablet,hospital products,hospital,hospitals,vitamin,weight less,minerals\" />\r\n            </Helmet>\r\n            <Row className=\"m-0 w-100 h-100 px-0 px-xl-5 px-lg-5 px-md-5 px-sm-0 py-xl-2 py-lg-1 py-md-1 py-sm-0\" style={{ background: \"#E2F5FB\" }}>\r\n                <Col className='m-0 p-0 d-flex justify-content-md-center align-items-md-center py-xl-4 py-lg-5 py-md-5 py-sm-0 py-0'>\r\n                    <div className='m-0 p-0 w-100 border border-2' style={{ borderColor: '#727272', background: '#FFFFFF', borderRadius: '10px' }}>\r\n                        <Row className='w-100 d-flex h-100 m-0 p-0'>\r\n                            <Col className='d-none d-xl-flex d-lg-flex d-md-flex d-sm-none justify-content-center align-items-center p-xl-5 p-lg-5 p-md-5 p-sm-5' xl={8} lg={8} md={8}>\r\n                                <div className='w-100 m-0 p-0 d-flex flex-column'>\r\n                                    <div className='flex-column m-0 p-0 w-100'>\r\n                                        <p className='m-0 p-0 text-center fw-bolder' style={{ color: '#17414F', fontSize: '17px' }}>Essential Vitamins</p>\r\n                                        <p className='m-0 p-0 text-center' style={{ color: '#727272', fontSize: '14px' }}>Only the best when you choose products offered on our platform.</p>\r\n                                        <p className='m-0 p-0 text-center' style={{ color: '#727272', fontSize: '14px' }}>high quality ingredients for high quality products!</p>\r\n                                    </div>\r\n                                    <div className='m-0 p-0 w-100 d-flex justify-content-center align-items-center mt-3'>\r\n                                        <img src={LoginImage} className='img-fluid' alt='loginImage' />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                            <Col className='d-flex justify-content-center align-items-center py-0 px-3 px-sm-5 py-sm-5 px-md-0 px-lg-0 px-xl-0 px-xxl-0' xl={4} lg={4} md={4} sm={12} xs={12} style={{ background: '#17414F', borderTopRightRadius: '10px', borderBottomRightRadius: '10px' }}>\r\n                                <div className='p-0 w-100 border border-2 align-items-center d-flex justify-content-center shadow py-5 py-xl-5 py-md-4 py-sm-5' style={{ marginLeft: `${margin}`, borderRadius: '10px', borderColor: '#727272', background: '#FFFFFF' }}>\r\n                                    <Form className='h-75 w-75 d-flex' id=\"myForm\" onSubmit={(event) => isChecked === true && localEmail !== null && token !== null ? handleAutoLogin(event) : handleSubmit(event)}>\r\n                                        <div className='m-0 p-0 flex-column w-100 mt-xl-0'>\r\n                                            <p className='m-0 p-0 text-center fw-bolder' style={{ color: '#17414F', fontSize: '17px' }}>Login Please</p>\r\n                                            <p className='m-0 p-0 text-center mt-1' style={{ color: '#727272', fontSize: '14px' }}>This is a secure system and you will need to</p>\r\n                                            <p className='m-0 p-0 text-center' style={{ color: '#727272', fontSize: '14px' }}>provide your logim details to access the site.</p>\r\n                                            <Form.Group className='w-100 m-0 p-0 border-0 mt-3 mt-xl-5'>\r\n                                                <InputGroup className='rounded-2' style={{ border: '2px solid #17414F' }}>\r\n                                                    <InputGroup.Text className='bg-transparent' style={{ border: 'none' }}><MdEmail /></InputGroup.Text>\r\n                                                    <Form.Control\r\n                                                        type={\"text\"}\r\n                                                        placeholder='Email'\r\n                                                        name='email'\r\n                                                        value={login.email}\r\n                                                        onChange={(event) => handleChange(event)}\r\n                                                        maxLength={400}\r\n                                                        className=\"bg-transparent rounded-2\"\r\n                                                        style={{ border: 'none', boxShadow: 'none', outline: 'none' }} />\r\n                                                </InputGroup>\r\n                                            </Form.Group>\r\n                                            <Form.Group className='w-100 m-0 p-0 border-0 mt-3'>\r\n                                                <InputGroup className='rounded-2' style={{ border: '2px solid #17414F' }}>\r\n                                                    <InputGroup.Text className='bg-transparent' style={{ border: 'none' }}><IoIosLock /></InputGroup.Text>\r\n                                                    <Form.Control\r\n                                                        type={visible ? \"text\" : \"password\"}\r\n                                                        placeholder='Password'\r\n                                                        name='password'\r\n                                                        id='myPassword'\r\n                                                        value={login.password}\r\n                                                        onChange={(event) => handleChange(event)}\r\n                                                        maxLength={30}\r\n                                                        className=\"bg-transparent rounded-2\"\r\n                                                        style={{ border: 'none', boxShadow: 'none', outline: 'none' }} />\r\n\r\n                                                    <InputGroup.Text className='bg-transparent' style={{ border: 'none' }}>{visible ? <FaEyeSlash onClick={() => setVisible(false)} style={{ cursor: 'pointer' }} /> : <FaEye onClick={() => setVisible(true)} style={{ cursor: 'pointer' }} />}</InputGroup.Text>\r\n                                                </InputGroup>\r\n                                            </Form.Group>\r\n                                            <div className='d-flex m-0 p-0 w-100 mt-2 mb-2 justify-content-end'>\r\n                                                <a onClick={() => handleForgot()} className='fs-6 m-0 p-0' style={{ color: '#2D3F59', textDecoration: 'none', cursor: 'pointer' }}>Forgot Password?</a>\r\n                                            </div>\r\n                                            {/* <div className='d-flex m-0 p-0 w-100 mt-2 mb-2 justify-content-start gap-2'>\r\n                                            <Form.Group style={{cursor:\"pointer\"}}>\r\n                                                <Form.Check \r\n                                                    checked={isChecked}\r\n                                                    onChange={(event) => handleCheckChange(event)}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <p>Remember Me</p>\r\n                                        </div> */}\r\n                                            <div className='d-flex m-0 p-0'>\r\n                                                <Button className='w-100 text-center border-0 rounded-2' id='loginButton' type='submit' style={{ background: '#17414F', color: 'white' }}><span className='fw-bolder'>Login</span></Button>\r\n                                            </div>\r\n                                            <div className='d-flex m-0 p-0 w-100 mt-3 justify-content-center'>\r\n                                                <p className='w-100 m-0 p-0 text-center'>OR</p>\r\n                                            </div>\r\n                                            <div className='m-0 p-0 d-flex justify-content-end w-100 gap-1'>\r\n                                                <p className='m-0 p-0 gap-3 mt-1 mt-xl-0 mt-sm-1 mt-lg-0 mt-md-0 text-md-center' style={{ color: '#17414F' }}>Dont have an account? <Link className='fw-bolder text-decoration-none' style={{ color: '#17414F' }} to=\"/register\">register</Link></p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Form>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","import { Container, Row, Col } from 'react-bootstrap';\r\nimport Login from \"../../Component/Login\";\r\n\r\n\r\nfunction LoginLayout() {\r\n    return (\r\n        <Container fluid className='m-0 p-0 vh-100'>\r\n            <Row className='m-0 p-0 d-flex h-100'>\r\n                <Col className='d-flex m-0 p-0 h-100'>\r\n                    <Login/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default LoginLayout;"],"names":["visible","setVisible","useState","isChecked","setIsChecked","localStorage","getItem","margin","setMargin","getMargin","limit","setLimit","login","setLogin","email","password","navigate","useNavigate","localEmail","token","window","innerWidth","handleChange","event","name","value","target","_objectSpread","useEffect","handleResize","addEventListener","removeEventListener","Auth","logout","setItem","setTimeout","document","getElementById","setAttribute","removeAttribute","_jsxs","_Fragment","children","Helmet","_jsx","content","Row","className","style","background","Col","borderColor","borderRadius","xl","lg","md","color","fontSize","src","LoginImage","alt","sm","xs","borderTopRightRadius","borderBottomRightRadius","marginLeft","concat","Form","id","onSubmit","async","Validator","preventDefault","Swal","toast","position","showConfirmButton","timerProgressBar","timer","didOpen","querySelector","backgroundColor","onmouseenter","onmouseleave","fire","icon","title","userLogin","trimObject","Object","fromEntries","entries","map","_ref","key","toLowerCase","trim","console","log","_loginResponce$data","_loginResponce$data2","loginResponce","Axios","post","data","status","userToken","removeItem","loginButton","textContent","arMissField","Number","showCancelButton","msg","text","reverseButtons","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","then","result","isConfirmed","location","reload","error","message","handleAutoLogin","_ref2","handleSubmit","Group","InputGroup","border","Text","MdEmail","Control","type","placeholder","onChange","maxLength","boxShadow","outline","IoIosLock","FaEyeSlash","onClick","cursor","FaEye","textDecoration","Button","Link","to","Container","fluid","Login"],"sourceRoot":""}